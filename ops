{"version":1,"ops":[{"type":3,"author":{"id":"b83e8b4dfca7ebd9aba65d02ac0e5e24f95b7802"},"timestamp":1586614961,"message":"While I'm investigating this on my windows VM, can I ask have you tried\nadding the `bindgen` feature to your `Cargo.toml`? E.g.:\n\n```toml\n[dependencies]\nfitsio = { version = \"0.15.0\", features = [\"bindgen\"], no-default-features = true }\n```\n\nI say this because the `fitsio` package was originally created with a static\nconversion (using the command line version of `bingen`), and the resulting Rust\ncode bundled with `fitsio-sys`. This therefore makes some assumptions about the\nhost system (particularly macos 64-bit as this the architecture that I\noriginally used).\n\nIncluding the `bindgen` feature to your `Cargo.toml`means that the `fitsio-sys`\nbindings are generated at compile time. This does however complicate the\nbuilding as the crate then depends on `llvm` which may be *fun* to get working\nunder `msys2`.\n\nThis should mean that you get exactly the correct bindings for your architecture\n(i.e. any platform-specific `#ifdef`s in the `cfitsio` code will select your\narchitecture).\n\nAlso: I presume that compiling a C program that uses `cfitsio` works correctly?","files":null}]}