{"version":1,"ops":[{"type":3,"author":{"id":"b83e8b4dfca7ebd9aba65d02ac0e5e24f95b7802"},"timestamp":1586615083,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxMjQzMjgzNw==","github-url":"https://github.com/mindriot101/rust-fitsio/issues/118#issuecomment-612432837"},"message":"While I'm investigating this on my windows VM, can I ask have you tried\nadding the `bindgen` feature to your `Cargo.toml`? E.g.:\n\n```toml\n[dependencies]\nfitsio = { version = \"0.15.0\", features = [\"bindgen\"], no-default-features = true }\n```\n\nI say this because the `fitsio` package was originally created with a static\nconversion (using the command line version of `bingen`), and the resulting Rust\ncode bundled with `fitsio-sys`. This therefore makes some assumptions about the\nhost system (particularly macos 64-bit as this the architecture that I\noriginally used).\n\nIncluding the `bindgen` feature to your `Cargo.toml`means that the `fitsio-sys`\nbindings are generated at compile time. This does however complicate the\nbuilding as the crate then depends on `llvm` which may be *fun* to get working\nunder `msys2`.\n\nThis should mean that you get exactly the correct bindings for your architecture\n(i.e. any platform-specific `#ifdef`s in the `cfitsio` code will select your\narchitecture).\n\nAlso: I presume that compiling a C program that uses `cfitsio` works correctly?","files":null},{"type":4,"author":{"id":"b83e8b4dfca7ebd9aba65d02ac0e5e24f95b7802"},"timestamp":1586615083,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MzIyNDExMjk0OQ=="},"status":2},{"type":4,"author":{"id":"b83e8b4dfca7ebd9aba65d02ac0e5e24f95b7802"},"timestamp":1586615083,"metadata":{"github-id":"MDEzOlJlb3BlbmVkRXZlbnQzMjI0MTEyOTY2"},"status":1},{"type":3,"author":{"id":"b83e8b4dfca7ebd9aba65d02ac0e5e24f95b7802"},"timestamp":1586615137,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxMjQzMzAxNQ==","github-url":"https://github.com/mindriot101/rust-fitsio/issues/118#issuecomment-612433015"},"message":"\u003e Here's my usage (it's worked so far, also for bigger things like `gtk-rs`):\n\u003e \n\u003e     1. install MSYS2\n\u003e \n\u003e     2. install Rust via `rustup-init.exe` (variant: `x86_64-pc-windows-gnu`)\n\u003e \n\u003e     3. launch MSYS2 shell via `c:\\msys64\\mingw64.exe`, install development toolchain, install CFITSIO (`mingw64/mingw-w64-x86_64-cfitsio`)\n\u003e \n\u003e     4. perform `$ export PATH=/c/Users/.../.cargo/bin:$PATH` and proceed to build the project with `cargo` (still in the MSYS2 shell)\n\u003e \n\u003e \n\u003e If the above doesn't work for you, I could reinstall everything from scratch and note the steps to be sure.\n\nI'll have another go when I get the chance (hopefully this evening)","files":null}]}