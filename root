{"version":1,"ops":[{"type":1,"author":{"id":"b83e8b4dfca7ebd9aba65d02ac0e5e24f95b7802"},"timestamp":1507014819,"metadata":{"github-id":"MDU6SXNzdWUyNjIzMjY3ODU=","github-url":"https://github.com/mindriot101/rust-fitsio/issues/39","origin":"github"},"title":"Consider new API","message":"Based on a [reddit post][1] I saw an example of how to deal with mutable shared state within multiple structs gracefully. Instead of the current:\n\n```\nFitsHDU -\u003e FitsFile -\u003e fitsfile\n```\n\nsystem where the `FitsHDU` has a pointer to the underlying `fitsfile` object as it's struct member, the second struct is passed in as a function argument. This could be either:\n\n```rust\nlet f = FitsFile::open(\"file.fits\");\nlet hdu = f.hdu(\"test\");\nlet header_value = f.read_header(\u0026hdu, \"value\");\n```\n\nor \n\n```rust\nlet f = FitsFile::open(\"file.fits\");\nlet hdu = f.hdu(\"test\");\nlet header_value = hdu.read_header(\u0026f, \"value\");\n```\n\nrather than the current:\n\n```rust\nlet f = FitsFile::open(\"file.fits\");\nlet hdu = f.hdu(\"test\");\nlet header_value = hdu.read_header(\"value\");\n```\n\nThis would mean less mutable state would need to be on the `FitsHDU` object, and may result in a cleaner API.\n\nI do not know which way round is best. They both may require mutable access to the argument depending on the nature of any changes (e.g. with the first example, the function call may change the `hdu` information, and the second would _definitely_ require mutable access to the `FitsFile` object.\n\n[1]: https://www.reddit.com/r/rust/comments/72ian8/creating_a_program_structure_in_rust_how_to/dnitdmi/","files":null}]}